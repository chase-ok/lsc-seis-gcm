{
  "version": 3,
  "file": "/mnt/qfs4/chase.kernan/public_html/cgi-bin/lsc-seis-gcm/static/deploy/js/channels/main.js",
  "sources": [
    "../../../build/js/utils.js",
    "../../../build/js/channels/table.js",
    "../../../build/js/channels/main.js"
  ],
  "names": [],
  "mappingshJA,ADiJA;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "\n(function() {\n\n  define('utils',['d3'], function(d3) {\n    var IntervalFunc, loadJSON, loadUnwrappedJSON;\n    IntervalFunc = (function() {\n\n      function IntervalFunc(_func, _period) {\n        this._func = _func;\n        this._period = _period != null ? _period : 1000;\n        this._id = null;\n        this._running = false;\n      }\n\n      IntervalFunc.prototype.func = function(func) {\n        if (func != null) {\n          this._func = func;\n          if (this.running()) {\n            this.reset();\n          }\n          return this;\n        } else {\n          return this._func;\n        }\n      };\n\n      IntervalFunc.prototype.period = function(period) {\n        if (period != null) {\n          this._period = period;\n          if (this.running()) {\n            this.reset();\n          }\n          return this;\n        } else {\n          return this._period;\n        }\n      };\n\n      IntervalFunc.prototype.running = function(running) {\n        if (running != null) {\n          this._running = running;\n          if (this._id != null) {\n            clearInterval(this._id);\n            this._id = null;\n          }\n          if (running) {\n            this._id = setInterval(this.func(), this.period());\n          }\n          return this;\n        } else {\n          return this._running;\n        }\n      };\n\n      IntervalFunc.prototype.reset = function() {\n        this.running(false);\n        return this.running(true);\n      };\n\n      return IntervalFunc;\n\n    })();\n    return {\n      definitions: window.definitions,\n      describe: function(obj, attrs) {\n        var attr, value;\n        for (attr in attrs) {\n          value = attrs[attr];\n          obj = obj.attr(attr, value);\n        }\n        return obj;\n      },\n      mergeObj: function(base, newObj) {\n        var key, value;\n        if (base == null) {\n          base = {};\n        }\n        for (key in newObj) {\n          value = newObj[key];\n          if (value != null) {\n            base[key] = value;\n          }\n        }\n        return base;\n      },\n      isEmpty: function(obj) {\n        var prop, value;\n        for (prop in obj) {\n          value = obj[prop];\n          if (obj.hasOwnProperty(prop)) {\n            return false;\n          }\n        }\n        return true;\n      },\n      mash: function(properties) {\n        var obj, prop, _i, _len;\n        obj = {};\n        for (_i = 0, _len = properties.length; _i < _len; _i++) {\n          prop = properties[_i];\n          obj[prop[0]] = prop[1];\n        }\n        return obj;\n      },\n      loadJSON: loadJSON = function(url, onData, numRetries) {\n        if (numRetries == null) {\n          numRetries = 3;\n        }\n        if (!(numRetries > 0)) {\n          return;\n        }\n        return d3.json(definitions.webRoot + url, function(error, json) {\n          if ((error != null) || !json.success) {\n            if (error != null) {\n              console.log(error);\n            }\n            if (json != null) {\n              console.log(json.error);\n            }\n            return setTimeout((function() {\n              return loadJSON(url, onData, numRetries - 1);\n            }), 10);\n          } else {\n            return onData(json.data);\n          }\n        });\n      },\n      loadUnwrappedJSON: loadUnwrappedJSON = function(url, onData, numRetries) {\n        if (numRetries == null) {\n          numRetries = 3;\n        }\n        if (!(numRetries > 0)) {\n          return;\n        }\n        return d3.json(definitions.webRoot + url, function(error, json) {\n          if (error != null) {\n            if (error != null) {\n              console.log(error);\n            }\n            return setTimeout((function() {\n              return loadUnwrappedJSON(url, onData, numRetries - 1);\n            }), 10);\n          } else {\n            return onData(json);\n          }\n        });\n      },\n      property: function(funcs) {\n        var getter, oldValue, setter;\n        oldValue = void 0;\n        if (typeof funcs === 'function' || !(funcs.get != null)) {\n          getter = function(value) {\n            return value;\n          };\n        } else {\n          getter = funcs.get;\n        }\n        if (typeof funcs === 'function') {\n          setter = funcs;\n        } else {\n          if (funcs.set != null) {\n            setter = funcs.set;\n          } else {\n            setter = function() {\n              throw new Error('property is read-only');\n            };\n          }\n        }\n        return function(value) {\n          if (value != null) {\n            oldValue = setter.call(this, value, oldValue);\n            return this;\n          } else {\n            return getter.call(this, oldValue);\n          }\n        };\n      },\n      degrees: function(radians) {\n        return radians / Math.PI * 180;\n      },\n      radians: function(degrees) {\n        return Math.PI / 180 * degrees;\n      },\n      IntervalFunc: IntervalFunc\n    };\n  });\n\n}).call(this);\n",
    "\n(function() {\n\n  define('channels/table',['utils', 'jquery', 'datatables', 'd3'], function(utils, $, _, d3) {\n    var ChannelsTable, webRoot;\n    webRoot = utils.definitions.webRoot;\n    ChannelsTable = (function() {\n\n      function ChannelsTable(container) {\n        var def, name, viewLink, _ref,\n          _this = this;\n        this.container = $(container);\n        this.columnIndex = [\"id\", \"ifo\", \"subsystem\", \"name\", \"triggers\"];\n        viewLink = function(channel, source) {\n          return \"<a href=\\\"\" + (_this.triggersUrl(channel, source)) + \"\\\">View</a>\";\n        };\n        this.columns = {\n          id: {\n            sTitle: \"ID\",\n            sWidth: \"10%\"\n          },\n          ifo: {\n            sTitle: \"IFO\",\n            sWidth: \"10%\"\n          },\n          subsystem: {\n            sTitle: \"Subsystem\",\n            sWidth: \"30%\"\n          },\n          name: {\n            sTitle: \"Channel\",\n            sWidth: \"40%\"\n          },\n          triggers: {\n            sTitle: \"Triggers\",\n            sClass: \"center\",\n            mRender: function(url, type, row) {\n              return \"<a href=\\\"\" + url + \"\\\">View</a>\";\n            },\n            sWidth: \"10%\"\n          }\n        };\n        _ref = this.columns;\n        for (name in _ref) {\n          def = _ref[name];\n          def.aTargets = [this.columnIndex.indexOf(name)];\n        }\n        this.dataMap = {\n          id: function(channel) {\n            return channel.id;\n          },\n          ifo: function(channel) {\n            return channel.ifo;\n          },\n          subsystem: function(channel) {\n            return channel.subsystem;\n          },\n          name: function(channel) {\n            return channel.name;\n          },\n          triggers: function(channel) {\n            return \"triggers/channel/\" + channel.id;\n          }\n        };\n      }\n\n      ChannelsTable.prototype.prepare = function() {\n        var column, name, obj, _ref;\n        this.table = $(\"<table/>\", {\n          \"class\": \"dataTable\",\n          id: \"channels\",\n          border: 0,\n          cellspacing: 0,\n          cellpadding: 0\n        });\n        this.table.appendTo(this.container);\n        this.header = $(\"<thead/>\");\n        this.header.appendTo(this.table);\n        this.headerRow = $(\"<tr/>\");\n        this.headerRow.appendTo(this.header);\n        _ref = this.columns;\n        for (column in _ref) {\n          obj = _ref[column];\n          this.headerRow.append($(\"<th>\" + obj.sTitle + \"</th>\"));\n        }\n        return this.table = this.table.dataTable({\n          aoColumns: (function() {\n            var _i, _len, _ref1, _results;\n            _ref1 = this.columnIndex;\n            _results = [];\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n              name = _ref1[_i];\n              _results.push(this.columns[name]);\n            }\n            return _results;\n          }).call(this)\n        });\n      };\n\n      ChannelsTable.prototype.addChannel = function(channel) {\n        var name, row;\n        row = (function() {\n          var _i, _len, _ref, _results;\n          _ref = this.columnIndex;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            name = _ref[_i];\n            _results.push(this.dataMap[name](channel));\n          }\n          return _results;\n        }).call(this);\n        return this.table.fnAddData(row);\n      };\n\n      ChannelsTable.prototype.loadFromUrl = function(url) {\n        var _this = this;\n        if (url == null) {\n          url = \"channels/all\";\n        }\n        return d3.json(url, function(error, json) {\n          var channel, _i, _len, _ref, _results;\n          if ((error != null) || !json.success) {\n            console.log(error);\n            console.log(json);\n            return;\n          }\n          _ref = json.data.channels;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            channel = _ref[_i];\n            _results.push(_this.addChannel(channel));\n          }\n          return _results;\n        });\n      };\n\n      return ChannelsTable;\n\n    })();\n    return {\n      ChannelsTable: ChannelsTable\n    };\n  });\n\n}).call(this);\n",
    "\n(function() {\n\n  define('channels/main',['jquery', 'channels/table'], function($, table) {\n    return $(function() {\n      table = new table.ChannelsTable($(\"#container\"));\n      table.prepare();\n      return table.loadFromUrl();\n    });\n  });\n\n}).call(this);\n"
  ]
}