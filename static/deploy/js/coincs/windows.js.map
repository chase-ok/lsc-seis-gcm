{
  "version": 3,
  "file": "/mnt/qfs4/chase.kernan/public_html/cgi-bin/lsc-seis-gcm/static/deploy/js/coincs/windows.js",
  "sources": [
    "../../../build/js/utils.js",
    "../../../build/js/plots.js",
    "../../../build/js/coincs/windows.js"
  ],
  "names": [],
  "mappingsruBA,ADsuBA;ACruBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "\n(function() {\n\n  define('utils',['d3'], function(d3) {\n    var IntervalFunc, loadJSON, loadUnwrappedJSON;\n    IntervalFunc = (function() {\n\n      function IntervalFunc(_func, _period) {\n        this._func = _func;\n        this._period = _period != null ? _period : 1000;\n        this._id = null;\n        this._running = false;\n      }\n\n      IntervalFunc.prototype.func = function(func) {\n        if (func != null) {\n          this._func = func;\n          if (this.running()) {\n            this.reset();\n          }\n          return this;\n        } else {\n          return this._func;\n        }\n      };\n\n      IntervalFunc.prototype.period = function(period) {\n        if (period != null) {\n          this._period = period;\n          if (this.running()) {\n            this.reset();\n          }\n          return this;\n        } else {\n          return this._period;\n        }\n      };\n\n      IntervalFunc.prototype.running = function(running) {\n        if (running != null) {\n          this._running = running;\n          if (this._id != null) {\n            clearInterval(this._id);\n            this._id = null;\n          }\n          if (running) {\n            this._id = setInterval(this.func(), this.period());\n          }\n          return this;\n        } else {\n          return this._running;\n        }\n      };\n\n      IntervalFunc.prototype.reset = function() {\n        this.running(false);\n        return this.running(true);\n      };\n\n      return IntervalFunc;\n\n    })();\n    return {\n      definitions: window.definitions,\n      describe: function(obj, attrs) {\n        var attr, value;\n        for (attr in attrs) {\n          value = attrs[attr];\n          obj = obj.attr(attr, value);\n        }\n        return obj;\n      },\n      mergeObj: function(base, newObj) {\n        var key, value;\n        if (base == null) {\n          base = {};\n        }\n        for (key in newObj) {\n          value = newObj[key];\n          if (value != null) {\n            base[key] = value;\n          }\n        }\n        return base;\n      },\n      isEmpty: function(obj) {\n        var prop, value;\n        for (prop in obj) {\n          value = obj[prop];\n          if (obj.hasOwnProperty(prop)) {\n            return false;\n          }\n        }\n        return true;\n      },\n      mash: function(properties) {\n        var obj, prop, _i, _len;\n        obj = {};\n        for (_i = 0, _len = properties.length; _i < _len; _i++) {\n          prop = properties[_i];\n          obj[prop[0]] = prop[1];\n        }\n        return obj;\n      },\n      loadJSON: loadJSON = function(url, onData, numRetries) {\n        if (numRetries == null) {\n          numRetries = 3;\n        }\n        if (!(numRetries > 0)) {\n          return;\n        }\n        return d3.json(definitions.webRoot + url, function(error, json) {\n          if ((error != null) || !json.success) {\n            if (error != null) {\n              console.log(error);\n            }\n            if (json != null) {\n              console.log(json.error);\n            }\n            return setTimeout((function() {\n              return loadJSON(url, onData, numRetries - 1);\n            }), 10);\n          } else {\n            return onData(json.data);\n          }\n        });\n      },\n      loadUnwrappedJSON: loadUnwrappedJSON = function(url, onData, numRetries) {\n        if (numRetries == null) {\n          numRetries = 3;\n        }\n        if (!(numRetries > 0)) {\n          return;\n        }\n        return d3.json(definitions.webRoot + url, function(error, json) {\n          if (error != null) {\n            if (error != null) {\n              console.log(error);\n            }\n            return setTimeout((function() {\n              return loadUnwrappedJSON(url, onData, numRetries - 1);\n            }), 10);\n          } else {\n            return onData(json);\n          }\n        });\n      },\n      property: function(funcs) {\n        var getter, oldValue, setter;\n        oldValue = void 0;\n        if (typeof funcs === 'function' || !(funcs.get != null)) {\n          getter = function(value) {\n            return value;\n          };\n        } else {\n          getter = funcs.get;\n        }\n        if (typeof funcs === 'function') {\n          setter = funcs;\n        } else {\n          if (funcs.set != null) {\n            setter = funcs.set;\n          } else {\n            setter = function() {\n              throw new Error('property is read-only');\n            };\n          }\n        }\n        return function(value) {\n          if (value != null) {\n            oldValue = setter.call(this, value, oldValue);\n            return this;\n          } else {\n            return getter.call(this, oldValue);\n          }\n        };\n      },\n      degrees: function(radians) {\n        return radians / Math.PI * 180;\n      },\n      radians: function(degrees) {\n        return Math.PI / 180 * degrees;\n      },\n      IntervalFunc: IntervalFunc\n    };\n  });\n\n}).call(this);\n",
    "\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  define('plots',['utils', 'd3', 'jquery'], function(utils, d3, $) {\n    var BasicPlot, Histogram, ScatterPlot, SvgPlot, ZColorPlot, defaultMargin, describe, mash, mergeObj, property, _clipCount;\n    mash = utils.mash, describe = utils.describe, mergeObj = utils.mergeObj, property = utils.property;\n    _clipCount = 0;\n    defaultMargin = {\n      top: 40,\n      right: 70,\n      bottom: 50,\n      left: 60\n    };\n    SvgPlot = (function() {\n\n      function SvgPlot(rootSelector, margin, dimensions) {\n        var dim;\n        this.rootSelector = rootSelector != null ? rootSelector : \"body\";\n        this.margin = margin != null ? margin : defaultMargin;\n        this.dimensions = dimensions != null ? dimensions : ['x', 'y'];\n        this.root = d3.select(this.rootSelector);\n        this.size = {\n          x: this.root.attr(\"width\"),\n          y: this.root.attr(\"height\")\n        };\n        this.canvasSize = {\n          x: this.size.x - this.margin.left - this.margin.right,\n          y: this.size.y - this.margin.top - this.margin.bottom\n        };\n        this._scales = mash((function() {\n          var _i, _len, _ref, _results;\n          _ref = this.dimensions;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            dim = _ref[_i];\n            _results.push([dim, d3.scale.linear()]);\n          }\n          return _results;\n        }).call(this));\n        this._title = \"\";\n        this._prepared = false;\n      }\n\n      SvgPlot.prototype.select = function(selector) {\n        return d3.select(\"\" + this.rootSelector + \" \" + selector);\n      };\n\n      SvgPlot.prototype.scales = function(scales, ranges) {\n        var dim, range;\n        if (ranges == null) {\n          ranges = {\n            x: [0, this.canvasSize.x],\n            y: [this.canvasSize.y, 0]\n          };\n        }\n        if (scales != null) {\n          mergeObj(this._scales, scales);\n          this.declareDirty();\n          return this;\n        } else {\n          for (dim in ranges) {\n            range = ranges[dim];\n            this._scales[dim].range(range);\n          }\n          return this._scales;\n        }\n      };\n\n      SvgPlot.prototype.title = function(title) {\n        if (title != null) {\n          this._title = title;\n          if (this._prepared) {\n            this.select(\".title\").text(title);\n          }\n          return this;\n        } else {\n          return this._title;\n        }\n      };\n\n      SvgPlot.prototype.limits = function(limits) {\n        var dim, limit;\n        if (limits != null) {\n          for (dim in limits) {\n            limit = limits[dim];\n            this._scales[dim].domain(limit);\n          }\n          this.declareDirty();\n          return this;\n        } else {\n          return mash((function() {\n            var _i, _len, _ref, _results;\n            _ref = this.dimensions;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              dim = _ref[_i];\n              _results.push([dim, this._scales[dim].domain()]);\n            }\n            return _results;\n          }).call(this));\n        }\n      };\n\n      SvgPlot.prototype.maps = function() {\n        var dim;\n        return mash((function() {\n          var _i, _len, _ref, _results;\n          _ref = this.dimensions;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            dim = _ref[_i];\n            _results.push([dim, this._scales[dim].copy()]);\n          }\n          return _results;\n        }).call(this));\n      };\n\n      SvgPlot.prototype.clear = function() {\n        if (!this._prepared) {\n          return;\n        }\n        this.canvas.remove();\n        this._prepared = false;\n        return this.prepare();\n      };\n\n      SvgPlot.prototype.prepare = function() {\n        if (this._prepared) {\n          return false;\n        }\n        this._prepareCanvas();\n        this._prepareCanvasClipPath();\n        this._prepareTitle();\n        return this._prepared = true;\n      };\n\n      SvgPlot.prototype.declareDirty = function() {\n        this.clear();\n        this.prepare();\n        return this;\n      };\n\n      SvgPlot.prototype._prepareCanvas = function() {\n        this.canvas = describe(this.root.append(\"g\"), {\n          \"class\": \"canvas\",\n          transform: \"translate(\" + this.margin.left + \", \" + this.margin.top + \")\"\n        });\n        return this.svgDefs = this.canvas.append(\"defs\");\n      };\n\n      SvgPlot.prototype._prepareCanvasClipPath = function() {\n        this.canvasClipId = \"canvas-clip-\" + (_clipCount += 1);\n        this._canvasClip = this.canvas.append(\"clipPath\").attr(\"id\", this.canvasClipId);\n        return describe(this._canvasClip.append(\"rect\"), {\n          x: 0,\n          y: 0,\n          width: this.canvasSize.x,\n          height: this.canvasSize.y\n        });\n      };\n\n      SvgPlot.prototype._prepareTitle = function() {\n        var fontHeight;\n        fontHeight = 20;\n        return describe(this.canvas.append(\"text\").text(this._title), {\n          x: this.canvasSize.x / 2,\n          y: -this.margin.top + fontHeight * 1.1,\n          \"text-anchor\": \"middle\",\n          \"font-size\": \"\" + fontHeight,\n          \"class\": \"title axis-label\"\n        });\n      };\n\n      return SvgPlot;\n\n    })();\n    BasicPlot = (function(_super) {\n\n      __extends(BasicPlot, _super);\n\n      function BasicPlot(rootSelector, dimensions) {\n        var dim;\n        if (rootSelector == null) {\n          rootSelector = \"body\";\n        }\n        if (dimensions == null) {\n          dimensions = ['x', 'y'];\n        }\n        BasicPlot.__super__.constructor.call(this, rootSelector, null, dimensions);\n        this._axisLabels = mash((function() {\n          var _i, _len, _ref, _results;\n          _ref = this.dimensions;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            dim = _ref[_i];\n            _results.push([dim, dim]);\n          }\n          return _results;\n        }).call(this));\n        this._ticks = mash((function() {\n          var _i, _len, _ref, _results;\n          _ref = this.dimensions;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            dim = _ref[_i];\n            _results.push([dim, null]);\n          }\n          return _results;\n        }).call(this));\n        this._showGrid = true;\n      }\n\n      BasicPlot.prototype.select = function(selector) {\n        return d3.select(\"\" + this.rootSelector + \" \" + selector);\n      };\n\n      BasicPlot.prototype.axisLabels = function(labels) {\n        var dim, label, _ref;\n        if (labels != null) {\n          mergeObj(this._axisLabels, labels);\n          if (this._prepared) {\n            _ref = this._axisLabels;\n            for (dim in _ref) {\n              label = _ref[dim];\n              this.select(\".\" + dim + \".axis-label\").text(label);\n            }\n          }\n          return this;\n        } else {\n          return this._axisLabels;\n        }\n      };\n\n      BasicPlot.prototype.ticks = function(ticks) {\n        if (ticks != null) {\n          mergeObj(this._ticks, ticks);\n          this.declareDirty();\n          return this;\n        } else {\n          return this._ticks;\n        }\n      };\n\n      BasicPlot.prototype.showGrid = function(showGrid) {\n        if (showGrid != null) {\n          this._showGrid = showGrid;\n          this.declareDirty();\n          return this;\n        } else {\n          return this._showGrid;\n        }\n      };\n\n      BasicPlot.prototype.prepare = function() {\n        if (!BasicPlot.__super__.prepare.call(this)) {\n          return;\n        }\n        this._prepareGrid();\n        this._prepareAxes();\n        return this._prepareAxisLabels();\n      };\n\n      BasicPlot.prototype._prepareGrid = function() {\n        var axes;\n        if (!this._showGrid) {\n          return;\n        }\n        axes = this._makeAxes();\n        axes.x.tickSize(-this.canvasSize.y, 0, 0).tickFormat(\"\");\n        axes.y.tickSize(-this.canvasSize.x, 0, 0).tickFormat(\"\");\n        (describe(this.canvas.append(\"g\"), {\n          \"class\": \"x grid\",\n          transform: \"translate(0, \" + this.canvasSize.y + \")\"\n        })).call(axes.x);\n        return (describe(this.canvas.append(\"g\"), {\n          \"class\": \"y grid\"\n        })).call(axes.y);\n      };\n\n      BasicPlot.prototype._prepareAxisLabels = function() {\n        var fontHeight, rotated;\n        fontHeight = 15;\n        describe(this.canvas.append(\"text\").text(this._axisLabels.x), {\n          x: this.canvasSize.x / 2,\n          y: this.canvasSize.y + this.margin.bottom - fontHeight * 1.1,\n          \"text-anchor\": \"middle\",\n          \"font-size\": \"\" + fontHeight,\n          \"class\": \"x axis-label\"\n        });\n        rotated = this.canvas.append(\"g\").attr(\"transform\", \"rotate(-90)\");\n        return describe(rotated.append(\"text\").text(this._axisLabels.y), {\n          x: -this.canvasSize.y / 2,\n          y: fontHeight * 1.1 - this.margin.left,\n          \"text-anchor\": \"middle\",\n          \"font-size\": \"\" + fontHeight,\n          \"class\": \"y axis-label\"\n        });\n      };\n\n      BasicPlot.prototype._prepareAxes = function() {\n        var axes;\n        axes = this._makeAxes();\n        (describe(this.canvas.append(\"g\"), {\n          \"class\": \"x axis\",\n          transform: \"translate(0, \" + this.canvasSize.y + \")\"\n        })).call(axes.x);\n        return (describe(this.canvas.append(\"g\"), {\n          \"class\": \"y axis\"\n        })).call(axes.y);\n      };\n\n      BasicPlot.prototype._makeAxes = function(orientations) {\n        var axes, axis, dim, scales, _i, _len, _ref;\n        if (orientations == null) {\n          orientations = {\n            x: \"bottom\",\n            y: \"left\"\n          };\n        }\n        axes = {};\n        scales = this.scales();\n        _ref = this.dimensions;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          dim = _ref[_i];\n          axis = d3.svg.axis().scale(scales[dim]).orient(orientations[dim]);\n          if (this._ticks[dim] != null) {\n            axis.ticks.apply(axis, this._ticks[dim]);\n          }\n          axes[dim] = axis;\n        }\n        return axes;\n      };\n\n      return BasicPlot;\n\n    })(SvgPlot);\n    ZColorPlot = (function(_super) {\n\n      __extends(ZColorPlot, _super);\n\n      function ZColorPlot(rootSelector, dimensions) {\n        if (dimensions == null) {\n          dimensions = ['x', 'y', 'z'];\n        }\n        ZColorPlot.__super__.constructor.call(this, rootSelector, dimensions);\n        this._zBarWidth = 30;\n        this.canvasSize.x -= this._zBarWidth;\n        this._zColor = {\n          lower: d3.rgb(0, 0, 0),\n          upper: d3.rgb(255, 0, 0)\n        };\n      }\n\n      ZColorPlot.prototype.zColor = function(zColor) {\n        if (zColor != null) {\n          mergeObj(this._zColor(zColor));\n          this.declareDirty();\n          return this;\n        } else {\n          return this._zColor;\n        }\n      };\n\n      ZColorPlot.prototype.scales = function(scales, ranges) {\n        var dim, range;\n        if (ranges == null) {\n          ranges = {\n            z: [this.canvasSize.y, 0]\n          };\n        }\n        if (scales != null) {\n          return ZColorPlot.__super__.scales.call(this, scales);\n        } else {\n          scales = ZColorPlot.__super__.scales.call(this);\n          for (dim in ranges) {\n            range = ranges[dim];\n            scales[dim].range(range);\n          }\n          return scales;\n        }\n      };\n\n      ZColorPlot.prototype.maps = function() {\n        var colorInterp, height, oldMaps, zColor;\n        oldMaps = ZColorPlot.__super__.maps.call(this);\n        height = this.canvasSize.y;\n        zColor = this.zColor();\n        colorInterp = d3.interpolateRgb(zColor.lower, zColor.upper);\n        return {\n          x: oldMaps.x,\n          y: oldMaps.y,\n          z: function(z) {\n            return colorInterp(1.0 - oldMaps.z(z) / height);\n          }\n        };\n      };\n\n      ZColorPlot.prototype.prepare = function() {\n        if (!ZColorPlot.__super__.prepare.call(this)) {\n          return;\n        }\n        this._prepareZGradient();\n        this._prepareZColorBar();\n        this._prepareZAxis();\n        return this._prepareZLabel();\n      };\n\n      ZColorPlot.prototype._prepareZGradient = function() {\n        var zColor;\n        zColor = this.zColor();\n        this._zGradient = describe(this.svgDefs.append(\"linearGradient\"), {\n          id: \"zGradient\",\n          x1: \"0%\",\n          y1: \"100%\",\n          x2: \"0%\",\n          y2: \"0%\"\n        });\n        describe(this._zGradient.append(\"stop\"), {\n          offset: \"0%\",\n          \"stop-color\": zColor.lower,\n          \"stop-opacity\": 1\n        });\n        return describe(this._zGradient.append(\"stop\"), {\n          offset: \"100%\",\n          \"stop-color\": zColor.upper,\n          \"stop-opacity\": 1\n        });\n      };\n\n      ZColorPlot.prototype._prepareZColorBar = function() {\n        var spacing;\n        spacing = 10;\n        return this._zColorBar = describe(this.canvas.append(\"rect\"), {\n          x: this.canvasSize.x + spacing,\n          y: 0,\n          width: this._zBarWidth - spacing,\n          height: this.canvasSize.y,\n          fill: \"url(#\" + (this._zGradient.attr('id')) + \")\"\n        });\n      };\n\n      ZColorPlot.prototype._prepareZAxis = function() {\n        return (describe(this.canvas.append(\"g\"), {\n          \"class\": \"z axis\",\n          transform: \"translate(\" + (this.canvasSize.x + this._zBarWidth) + \", 0)\"\n        })).call(this._makeAxes({\n          z: \"right\"\n        }).z);\n      };\n\n      ZColorPlot.prototype._prepareZLabel = function() {\n        var fontHeight, rotated;\n        fontHeight = 15;\n        rotated = this.canvas.append(\"g\").attr(\"transform\", \"rotate(-90)\");\n        return describe(rotated.append(\"text\").text(this.axisLabels().z), {\n          x: -this.canvasSize.y / 2,\n          y: this.canvasSize.x + this._zBarWidth + this.margin.right,\n          \"text-anchor\": \"middle\",\n          \"font-size\": \"\" + fontHeight,\n          \"class\": \"z axis-label\"\n        });\n      };\n\n      return ZColorPlot;\n\n    })(BasicPlot);\n    Histogram = (function(_super) {\n\n      __extends(Histogram, _super);\n\n      function Histogram(rootSelector) {\n        Histogram.__super__.constructor.call(this, rootSelector);\n        this.bins([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n        this.useProbability(true);\n        this.limits({\n          y: [0, 1]\n        });\n      }\n\n      Histogram.prototype.bins = function(bins) {\n        if (bins != null) {\n          this._bins = bins;\n          this.declareDirty();\n          return this;\n        } else {\n          return this._bins;\n        }\n      };\n\n      Histogram.prototype.useProbability = function(useProbability) {\n        if (useProbability != null) {\n          this._useProbability = useProbability;\n          this.axisLabels({\n            y: useProbability ? \"Probability\" : \"Frequency\"\n          });\n          this.declareDirty();\n          return this;\n        } else {\n          return this._useProbability;\n        }\n      };\n\n      Histogram.prototype.plot = function(values) {\n        var data, histogram, rects, x, y, _ref;\n        this.prepare();\n        _ref = this.scales(), x = _ref.x, y = _ref.y;\n        histogram = d3.layout.histogram();\n        if (this.bins() != null) {\n          histogram.bins(this.bins());\n        }\n        histogram.frequency(!this.useProbability());\n        data = histogram(values);\n        this.canvas = d3.select(this.rootSelector + \">.canvas\");\n        rects = this.canvas.selectAll(\"rect.histogram-bar\").data(data);\n        describe(rects.enter().append(\"rect\"), {\n          \"class\": \"histogram-bar\",\n          x: function(d) {\n            return Math.floor(x(d.x));\n          },\n          y: function(d) {\n            return y(d.y);\n          },\n          width: function(d) {\n            return Math.ceil(x(d.x + d.dx) - x(d.x));\n          },\n          height: function(d) {\n            return y(0) - y(d.y);\n          },\n          fill: \"steelblue\",\n          \"shape-rendering\": \"crispEdge\"\n        });\n        return rects.exit().remove();\n      };\n\n      return Histogram;\n\n    })(BasicPlot);\n    ScatterPlot = (function(_super) {\n\n      __extends(ScatterPlot, _super);\n\n      function ScatterPlot(rootSelector, dimensions) {\n        if (rootSelector == null) {\n          rootSelector = \"body\";\n        }\n        if (dimensions == null) {\n          dimensions = ['x', 'y', 'color', 'size'];\n        }\n        ScatterPlot.__super__.constructor.call(this, rootSelector, dimensions);\n        this.showLegend(false);\n        this.scales({\n          color: d3.scale.category20(),\n          size: d3.scale.ordinal()\n        });\n        this.groups(['default']);\n      }\n\n      ScatterPlot.prototype.showLegend = property(function(show) {\n        this.declareDirty();\n        return show;\n      });\n\n      ScatterPlot.prototype.groups = property(function(groups) {\n        var group;\n        this.scales().color.domain(groups);\n        this.scales().size.domain(groups).range((function() {\n          var _i, _len, _results;\n          _results = [];\n          for (_i = 0, _len = groups.length; _i < _len; _i++) {\n            group = groups[_i];\n            _results.push(5);\n          }\n          return _results;\n        })());\n        this.declareDirty();\n        return groups;\n      });\n\n      ScatterPlot.prototype.sizes = property({\n        get: function() {\n          var groups, i, range;\n          range = this.scales().size.range();\n          groups = this.groups();\n          return mash((function() {\n            var _i, _ref, _results;\n            _results = [];\n            for (i = _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n              _results.push([groups[i], range[i]]);\n            }\n            return _results;\n          })());\n        },\n        set: function(sizes) {\n          var groups, i, range, size, _i, _ref;\n          range = this.scales().size.range();\n          groups = this.groups();\n          for (i = _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n            size = sizes[groups[i]];\n            if (size != null) {\n              range[i] = size;\n            }\n          }\n          this.scales().size.range(range);\n          return this.declareDirty();\n        }\n      });\n\n      ScatterPlot.prototype.colors = property({\n        get: function() {\n          var groups, i, range;\n          range = this.scales().color.range();\n          groups = this.groups();\n          return mash((function() {\n            var _i, _ref, _results;\n            _results = [];\n            for (i = _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n              _results.push([groups[i], range[i]]);\n            }\n            return _results;\n          })());\n        },\n        set: function(colors) {\n          var color, groups, i, range, _i, _ref;\n          range = this.scales().color.range();\n          groups = this.groups();\n          for (i = _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n            color = colors[groups[i]];\n            if (color != null) {\n              range[i] = color;\n            }\n          }\n          this.scales().color.range(range);\n          return this.declareDirty();\n        }\n      });\n\n      ScatterPlot.prototype.prepare = function() {\n        if (!ScatterPlot.__super__.prepare.call(this)) {\n          return;\n        }\n        return this._prepareLegend();\n      };\n\n      ScatterPlot.prototype._prepareLegend = function() {\n        var color, groups, legend, size, spacing, _i, _ref, _results,\n          _this = this;\n        if (!this.showLegend()) {\n          return;\n        }\n        spacing = 5;\n        size = {\n          x: 100,\n          y: 20\n        };\n        groups = this.groups();\n        legend = describe(this.canvas.append(\"g\").selectAll(\".legend\").data(d3.zip((function() {\n          _results = [];\n          for (var _i = 0, _ref = groups.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this), groups)).enter().append(\"g\"), {\n          \"class\": \"legend\",\n          transform: function(d) {\n            return \"translate(\" + (_this.canvasSize.x - size.x) + \", \" + (d[0] * (size.y + spacing)) + \")\";\n          }\n        });\n        color = this.scales().color;\n        describe(legend.append(\"rect\"), {\n          x: 0,\n          y: 0,\n          width: size.x,\n          height: size.y,\n          stroke: \"none\",\n          fill: function(d) {\n            return color(d[1]);\n          }\n        });\n        return describe(legend.append(\"text\").text(function(d) {\n          return d[1];\n        }), {\n          x: 3,\n          y: size.y - 5,\n          \"text-anchor\": \"start\",\n          \"font-size\": \"\" + (size.y - 8),\n          \"font-weight\": \"bold\",\n          fill: \"white\"\n        });\n      };\n\n      ScatterPlot.prototype.plot = function(groups) {\n        var circles, color, group, merged, point, points, size, x, y, _i, _len, _ref;\n        this.prepare();\n        merged = [];\n        for (group in groups) {\n          points = groups[group];\n          for (_i = 0, _len = points.length; _i < _len; _i++) {\n            point = points[_i];\n            merged.push({\n              group: group,\n              point: point\n            });\n          }\n        }\n        _ref = this.scales(), x = _ref.x, y = _ref.y, color = _ref.color, size = _ref.size;\n        this.canvas = d3.select(this.rootSelector + \">.canvas\");\n        circles = this.canvas.selectAll(\"circle.scatter-point\").data(merged);\n        describe(circles.enter().append(\"circle\"), {\n          \"class\": \"scatter-point\",\n          \"clip-path\": \"url(#\" + this.canvasClipId + \")\"\n        });\n        describe(circles.transition().duration(500), {\n          cx: function(d) {\n            return x(d.point[0]);\n          },\n          cy: function(d) {\n            return y(d.point[1]);\n          },\n          r: function(d) {\n            return size(d.group);\n          },\n          stroke: \"none\",\n          fill: function(d) {\n            return color(d.group);\n          }\n        });\n        return circles.exit().remove();\n      };\n\n      return ScatterPlot;\n\n    })(BasicPlot);\n    return {\n      SvgPlot: SvgPlot,\n      BasicPlot: BasicPlot,\n      ZColorPlot: ZColorPlot,\n      Histogram: Histogram,\n      ScatterPlot: ScatterPlot\n    };\n  });\n\n}).call(this);\n",
    "\n(function() {\n\n  define('coincs/windows',['utils', 'plots', 'd3', 'jquery', 'jquery-ui'], function(utils, plots, d3, $, _) {\n    var group;\n    console.log(\"Starting\");\n    group = utils.definitions.group;\n    return $(function() {\n      var scatter;\n      scatter = new plots.ScatterPlot(\"#scatter\");\n      scatter.title(group.name);\n      scatter.axisLabels({\n        x: \"Coincidence Window [s]\",\n        y: \"Field\"\n      });\n      scatter.groups([\"Actual\", \"Time Offset\"]);\n      scatter.sizes({\n        \"Actual\": 6,\n        \"Time Offset\": 3\n      });\n      scatter.colors({\n        \"Actual\": \"black\",\n        \"Time Offset\": \"#999999\"\n      });\n      scatter.showLegend(true);\n      return utils.loadUnwrappedJSON(\"/data/coinc/windows-\" + group.id + \".json\", function(data) {\n        return utils.loadUnwrappedJSON(\"/data/coinc/windows-\" + group.id + \"-without-exact.json\", function(dataWithout) {\n          var baseFields, datum, field, fields, options, plotField, select, _i, _len;\n          data = (function() {\n            var _i, _len, _results;\n            _results = [];\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              datum = data[_i];\n              if (datum.window <= 100) {\n                _results.push(datum);\n              }\n            }\n            return _results;\n          })();\n          plotField = function(name, getValue, withoutExact) {\n            var actual, random, timeOffset, x, yLimits, _i, _j, _len, _len1, _ref, _ref1;\n            scatter.axisLabels({\n              y: name\n            });\n            actual = [];\n            timeOffset = [];\n            _ref = (withoutExact ? dataWithout : data);\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              datum = _ref[_i];\n              actual.push([datum.window, getValue(datum.actual)]);\n              _ref1 = datum.rand;\n              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n                random = _ref1[_j];\n                timeOffset.push([datum.window, getValue(random)]);\n              }\n            }\n            yLimits = d3.extent(((function() {\n              var _k, _len2, _results;\n              _results = [];\n              for (_k = 0, _len2 = actual.length; _k < _len2; _k++) {\n                x = actual[_k];\n                _results.push(x[1]);\n              }\n              return _results;\n            })()).concat((function() {\n              var _k, _len2, _results;\n              _results = [];\n              for (_k = 0, _len2 = timeOffset.length; _k < _len2; _k++) {\n                x = timeOffset[_k];\n                _results.push(x[1]);\n              }\n              return _results;\n            })()));\n            if (yLimits[0] === yLimits[1]) {\n              yLimits[1] += 1.0;\n            } else {\n              yLimits[1] *= 1.1;\n            }\n            scatter.limits({\n              x: d3.extent((function() {\n                var _k, _len2, _results;\n                _results = [];\n                for (_k = 0, _len2 = data.length; _k < _len2; _k++) {\n                  x = data[_k];\n                  _results.push(x.window);\n                }\n                return _results;\n              })()),\n              y: yLimits\n            });\n            return scatter.plot({\n              \"Actual\": actual,\n              \"Time Offset\": timeOffset\n            });\n          };\n          baseFields = [\n            [\n              \"Number of Coincidences\", function(d) {\n                return d.num.overall_coincs;\n              }\n            ], [\n              \"Coincidence Rate [1/s]\", function(d) {\n                return d.rates.overall_coincs;\n              }\n            ], [\n              \"Coincidence Rate Ratio\", function(d) {\n                return d.rates.overall_coincs / d.rates.overall_triggers;\n              }\n            ], [\n              \"Mean Coincidence Length\", function(d) {\n                return d.lengths.mean;\n              }\n            ], [\n              \"Max Coincidence Length\", function(d) {\n                return d.lengths.max;\n              }\n            ], [\n              \"Mean Abs. Frequency Diff [Hz]\", function(d) {\n                return d.freqs.diffs.mean;\n              }\n            ], [\n              \"Frequency Spearman R\", function(d) {\n                return d.freqs.correl.spearmanr[0];\n              }\n            ], [\n              \"Frequency Pearson R\", function(d) {\n                return d.freqs.correl.pearsonr[0];\n              }\n            ], [\n              \"Mean Abs. SNR Diff\", function(d) {\n                return d.snrs.diffs.mean;\n              }\n            ], [\n              \"SNR Spearman R\", function(d) {\n                return d.snrs.correl.spearmanr[0];\n              }\n            ], [\n              \"SNR Pearson R\", function(d) {\n                return d.snrs.correl.pearsonr[0];\n              }\n            ], [\n              \"Mean dt [s]\", function(d) {\n                return d.dts.mean;\n              }\n            ], [\n              \"Median dt [s]\", function(d) {\n                return d.dts.median;\n              }\n            ], [\n              \"Max dt [s]\", function(d) {\n                return d.dts.max;\n              }\n            ]\n          ];\n          fields = [];\n          for (_i = 0, _len = baseFields.length; _i < _len; _i++) {\n            field = baseFields[_i];\n            fields.push(field.concat([false]));\n            field[0] += \" Without Exact\";\n            fields.push(field.concat([true]));\n          }\n          plotField.apply(null, fields[0]);\n          select = d3.select(\"body\").append(\"select\");\n          options = select.selectAll(\"option\").data(fields).enter().append(\"option\");\n          options.text(function(d) {\n            return d[0];\n          });\n          return select.on(\"change\", function() {\n            console.log(select.node());\n            return plotField.apply(null, fields[select.node().selectedIndex]);\n          });\n        });\n      });\n    });\n  });\n\n}).call(this);\n"
  ]
}